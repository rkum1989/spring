/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class GroupResultReasons extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3904572160465935482L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GroupResultReasons\",\"namespace\":\"avro\",\"fields\":[{\"name\":\"reasonCode\",\"type\":\"string\"},{\"name\":\"reasonText\",\"type\":\"string\"},{\"name\":\"additionalInfo\",\"type\":\"string\"},{\"name\":\"grade\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private java.lang.CharSequence reasonCode;
   private java.lang.CharSequence reasonText;
   private java.lang.CharSequence additionalInfo;
   private java.lang.CharSequence grade;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public GroupResultReasons() {}

  /**
   * All-args constructor.
   * @param reasonCode The new value for reasonCode
   * @param reasonText The new value for reasonText
   * @param additionalInfo The new value for additionalInfo
   * @param grade The new value for grade
   */
  public GroupResultReasons(java.lang.CharSequence reasonCode, java.lang.CharSequence reasonText, java.lang.CharSequence additionalInfo, java.lang.CharSequence grade) {
    this.reasonCode = reasonCode;
    this.reasonText = reasonText;
    this.additionalInfo = additionalInfo;
    this.grade = grade;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return reasonCode;
    case 1: return reasonText;
    case 2: return additionalInfo;
    case 3: return grade;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: reasonCode = (java.lang.CharSequence)value$; break;
    case 1: reasonText = (java.lang.CharSequence)value$; break;
    case 2: additionalInfo = (java.lang.CharSequence)value$; break;
    case 3: grade = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'reasonCode' field.
   * @return The value of the 'reasonCode' field.
   */
  public java.lang.CharSequence getReasonCode() {
    return reasonCode;
  }


  /**
   * Gets the value of the 'reasonText' field.
   * @return The value of the 'reasonText' field.
   */
  public java.lang.CharSequence getReasonText() {
    return reasonText;
  }


  /**
   * Gets the value of the 'additionalInfo' field.
   * @return The value of the 'additionalInfo' field.
   */
  public java.lang.CharSequence getAdditionalInfo() {
    return additionalInfo;
  }


  /**
   * Gets the value of the 'grade' field.
   * @return The value of the 'grade' field.
   */
  public java.lang.CharSequence getGrade() {
    return grade;
  }


  /**
   * Creates a new GroupResultReasons RecordBuilder.
   * @return A new GroupResultReasons RecordBuilder
   */
  public static avro.GroupResultReasons.Builder newBuilder() {
    return new avro.GroupResultReasons.Builder();
  }

  /**
   * Creates a new GroupResultReasons RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new GroupResultReasons RecordBuilder
   */
  public static avro.GroupResultReasons.Builder newBuilder(avro.GroupResultReasons.Builder other) {
    return new avro.GroupResultReasons.Builder(other);
  }

  /**
   * Creates a new GroupResultReasons RecordBuilder by copying an existing GroupResultReasons instance.
   * @param other The existing instance to copy.
   * @return A new GroupResultReasons RecordBuilder
   */
  public static avro.GroupResultReasons.Builder newBuilder(avro.GroupResultReasons other) {
    return new avro.GroupResultReasons.Builder(other);
  }

  /**
   * RecordBuilder for GroupResultReasons instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GroupResultReasons>
    implements org.apache.avro.data.RecordBuilder<GroupResultReasons> {

    private java.lang.CharSequence reasonCode;
    private java.lang.CharSequence reasonText;
    private java.lang.CharSequence additionalInfo;
    private java.lang.CharSequence grade;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(avro.GroupResultReasons.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.reasonCode)) {
        this.reasonCode = data().deepCopy(fields()[0].schema(), other.reasonCode);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.reasonText)) {
        this.reasonText = data().deepCopy(fields()[1].schema(), other.reasonText);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.additionalInfo)) {
        this.additionalInfo = data().deepCopy(fields()[2].schema(), other.additionalInfo);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.grade)) {
        this.grade = data().deepCopy(fields()[3].schema(), other.grade);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing GroupResultReasons instance
     * @param other The existing instance to copy.
     */
    private Builder(avro.GroupResultReasons other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.reasonCode)) {
        this.reasonCode = data().deepCopy(fields()[0].schema(), other.reasonCode);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.reasonText)) {
        this.reasonText = data().deepCopy(fields()[1].schema(), other.reasonText);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.additionalInfo)) {
        this.additionalInfo = data().deepCopy(fields()[2].schema(), other.additionalInfo);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.grade)) {
        this.grade = data().deepCopy(fields()[3].schema(), other.grade);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'reasonCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getReasonCode() {
      return reasonCode;
    }

    /**
      * Sets the value of the 'reasonCode' field.
      * @param value The value of 'reasonCode'.
      * @return This builder.
      */
    public avro.GroupResultReasons.Builder setReasonCode(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.reasonCode = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'reasonCode' field has been set.
      * @return True if the 'reasonCode' field has been set, false otherwise.
      */
    public boolean hasReasonCode() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'reasonCode' field.
      * @return This builder.
      */
    public avro.GroupResultReasons.Builder clearReasonCode() {
      reasonCode = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'reasonText' field.
      * @return The value.
      */
    public java.lang.CharSequence getReasonText() {
      return reasonText;
    }

    /**
      * Sets the value of the 'reasonText' field.
      * @param value The value of 'reasonText'.
      * @return This builder.
      */
    public avro.GroupResultReasons.Builder setReasonText(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.reasonText = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'reasonText' field has been set.
      * @return True if the 'reasonText' field has been set, false otherwise.
      */
    public boolean hasReasonText() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'reasonText' field.
      * @return This builder.
      */
    public avro.GroupResultReasons.Builder clearReasonText() {
      reasonText = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'additionalInfo' field.
      * @return The value.
      */
    public java.lang.CharSequence getAdditionalInfo() {
      return additionalInfo;
    }

    /**
      * Sets the value of the 'additionalInfo' field.
      * @param value The value of 'additionalInfo'.
      * @return This builder.
      */
    public avro.GroupResultReasons.Builder setAdditionalInfo(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.additionalInfo = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'additionalInfo' field has been set.
      * @return True if the 'additionalInfo' field has been set, false otherwise.
      */
    public boolean hasAdditionalInfo() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'additionalInfo' field.
      * @return This builder.
      */
    public avro.GroupResultReasons.Builder clearAdditionalInfo() {
      additionalInfo = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'grade' field.
      * @return The value.
      */
    public java.lang.CharSequence getGrade() {
      return grade;
    }

    /**
      * Sets the value of the 'grade' field.
      * @param value The value of 'grade'.
      * @return This builder.
      */
    public avro.GroupResultReasons.Builder setGrade(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.grade = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'grade' field has been set.
      * @return True if the 'grade' field has been set, false otherwise.
      */
    public boolean hasGrade() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'grade' field.
      * @return This builder.
      */
    public avro.GroupResultReasons.Builder clearGrade() {
      grade = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public GroupResultReasons build() {
      try {
        GroupResultReasons record = new GroupResultReasons();
        record.reasonCode = fieldSetFlags()[0] ? this.reasonCode : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.reasonText = fieldSetFlags()[1] ? this.reasonText : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.additionalInfo = fieldSetFlags()[2] ? this.additionalInfo : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.grade = fieldSetFlags()[3] ? this.grade : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
