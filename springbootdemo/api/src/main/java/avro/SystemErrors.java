/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class SystemErrors extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4248987079466036146L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SystemErrors\",\"namespace\":\"avro\",\"fields\":[{\"name\":\"applicationID\",\"type\":\"string\"},{\"name\":\"code\",\"type\":\"string\"},{\"name\":\"subcode\",\"type\":\"string\"},{\"name\":\"message\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private java.lang.CharSequence applicationID;
   private java.lang.CharSequence code;
   private java.lang.CharSequence subcode;
   private java.lang.CharSequence message;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SystemErrors() {}

  /**
   * All-args constructor.
   * @param applicationID The new value for applicationID
   * @param code The new value for code
   * @param subcode The new value for subcode
   * @param message The new value for message
   */
  public SystemErrors(java.lang.CharSequence applicationID, java.lang.CharSequence code, java.lang.CharSequence subcode, java.lang.CharSequence message) {
    this.applicationID = applicationID;
    this.code = code;
    this.subcode = subcode;
    this.message = message;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return applicationID;
    case 1: return code;
    case 2: return subcode;
    case 3: return message;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: applicationID = (java.lang.CharSequence)value$; break;
    case 1: code = (java.lang.CharSequence)value$; break;
    case 2: subcode = (java.lang.CharSequence)value$; break;
    case 3: message = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'applicationID' field.
   * @return The value of the 'applicationID' field.
   */
  public java.lang.CharSequence getApplicationID() {
    return applicationID;
  }


  /**
   * Gets the value of the 'code' field.
   * @return The value of the 'code' field.
   */
  public java.lang.CharSequence getCode() {
    return code;
  }


  /**
   * Gets the value of the 'subcode' field.
   * @return The value of the 'subcode' field.
   */
  public java.lang.CharSequence getSubcode() {
    return subcode;
  }


  /**
   * Gets the value of the 'message' field.
   * @return The value of the 'message' field.
   */
  public java.lang.CharSequence getMessage() {
    return message;
  }


  /**
   * Creates a new SystemErrors RecordBuilder.
   * @return A new SystemErrors RecordBuilder
   */
  public static avro.SystemErrors.Builder newBuilder() {
    return new avro.SystemErrors.Builder();
  }

  /**
   * Creates a new SystemErrors RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SystemErrors RecordBuilder
   */
  public static avro.SystemErrors.Builder newBuilder(avro.SystemErrors.Builder other) {
    return new avro.SystemErrors.Builder(other);
  }

  /**
   * Creates a new SystemErrors RecordBuilder by copying an existing SystemErrors instance.
   * @param other The existing instance to copy.
   * @return A new SystemErrors RecordBuilder
   */
  public static avro.SystemErrors.Builder newBuilder(avro.SystemErrors other) {
    return new avro.SystemErrors.Builder(other);
  }

  /**
   * RecordBuilder for SystemErrors instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SystemErrors>
    implements org.apache.avro.data.RecordBuilder<SystemErrors> {

    private java.lang.CharSequence applicationID;
    private java.lang.CharSequence code;
    private java.lang.CharSequence subcode;
    private java.lang.CharSequence message;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(avro.SystemErrors.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.applicationID)) {
        this.applicationID = data().deepCopy(fields()[0].schema(), other.applicationID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.code)) {
        this.code = data().deepCopy(fields()[1].schema(), other.code);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.subcode)) {
        this.subcode = data().deepCopy(fields()[2].schema(), other.subcode);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.message)) {
        this.message = data().deepCopy(fields()[3].schema(), other.message);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing SystemErrors instance
     * @param other The existing instance to copy.
     */
    private Builder(avro.SystemErrors other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.applicationID)) {
        this.applicationID = data().deepCopy(fields()[0].schema(), other.applicationID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.code)) {
        this.code = data().deepCopy(fields()[1].schema(), other.code);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.subcode)) {
        this.subcode = data().deepCopy(fields()[2].schema(), other.subcode);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.message)) {
        this.message = data().deepCopy(fields()[3].schema(), other.message);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'applicationID' field.
      * @return The value.
      */
    public java.lang.CharSequence getApplicationID() {
      return applicationID;
    }

    /**
      * Sets the value of the 'applicationID' field.
      * @param value The value of 'applicationID'.
      * @return This builder.
      */
    public avro.SystemErrors.Builder setApplicationID(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.applicationID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'applicationID' field has been set.
      * @return True if the 'applicationID' field has been set, false otherwise.
      */
    public boolean hasApplicationID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'applicationID' field.
      * @return This builder.
      */
    public avro.SystemErrors.Builder clearApplicationID() {
      applicationID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'code' field.
      * @return The value.
      */
    public java.lang.CharSequence getCode() {
      return code;
    }

    /**
      * Sets the value of the 'code' field.
      * @param value The value of 'code'.
      * @return This builder.
      */
    public avro.SystemErrors.Builder setCode(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.code = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'code' field has been set.
      * @return True if the 'code' field has been set, false otherwise.
      */
    public boolean hasCode() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'code' field.
      * @return This builder.
      */
    public avro.SystemErrors.Builder clearCode() {
      code = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'subcode' field.
      * @return The value.
      */
    public java.lang.CharSequence getSubcode() {
      return subcode;
    }

    /**
      * Sets the value of the 'subcode' field.
      * @param value The value of 'subcode'.
      * @return This builder.
      */
    public avro.SystemErrors.Builder setSubcode(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.subcode = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'subcode' field has been set.
      * @return True if the 'subcode' field has been set, false otherwise.
      */
    public boolean hasSubcode() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'subcode' field.
      * @return This builder.
      */
    public avro.SystemErrors.Builder clearSubcode() {
      subcode = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'message' field.
      * @return The value.
      */
    public java.lang.CharSequence getMessage() {
      return message;
    }

    /**
      * Sets the value of the 'message' field.
      * @param value The value of 'message'.
      * @return This builder.
      */
    public avro.SystemErrors.Builder setMessage(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.message = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'message' field has been set.
      * @return True if the 'message' field has been set, false otherwise.
      */
    public boolean hasMessage() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'message' field.
      * @return This builder.
      */
    public avro.SystemErrors.Builder clearMessage() {
      message = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public SystemErrors build() {
      try {
        SystemErrors record = new SystemErrors();
        record.applicationID = fieldSetFlags()[0] ? this.applicationID : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.code = fieldSetFlags()[1] ? this.code : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.subcode = fieldSetFlags()[2] ? this.subcode : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.message = fieldSetFlags()[3] ? this.message : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
