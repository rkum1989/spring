/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class MdxVerificationRequest extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7224845861359628739L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MdxVerificationRequest\",\"namespace\":\"avro\",\"fields\":[{\"name\":\"fullname\",\"type\":\"string\"},{\"name\":\"policyId\",\"type\":\"string\"},{\"name\":\"MdxGroupMethod\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private java.lang.CharSequence fullname;
   private java.lang.CharSequence policyId;
   private java.lang.CharSequence MdxGroupMethod;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MdxVerificationRequest() {}

  /**
   * All-args constructor.
   * @param fullname The new value for fullname
   * @param policyId The new value for policyId
   * @param MdxGroupMethod The new value for MdxGroupMethod
   */
  public MdxVerificationRequest(java.lang.CharSequence fullname, java.lang.CharSequence policyId, java.lang.CharSequence MdxGroupMethod) {
    this.fullname = fullname;
    this.policyId = policyId;
    this.MdxGroupMethod = MdxGroupMethod;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return fullname;
    case 1: return policyId;
    case 2: return MdxGroupMethod;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: fullname = (java.lang.CharSequence)value$; break;
    case 1: policyId = (java.lang.CharSequence)value$; break;
    case 2: MdxGroupMethod = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'fullname' field.
   * @return The value of the 'fullname' field.
   */
  public java.lang.CharSequence getFullname() {
    return fullname;
  }


  /**
   * Gets the value of the 'policyId' field.
   * @return The value of the 'policyId' field.
   */
  public java.lang.CharSequence getPolicyId() {
    return policyId;
  }


  /**
   * Gets the value of the 'MdxGroupMethod' field.
   * @return The value of the 'MdxGroupMethod' field.
   */
  public java.lang.CharSequence getMdxGroupMethod() {
    return MdxGroupMethod;
  }


  /**
   * Creates a new MdxVerificationRequest RecordBuilder.
   * @return A new MdxVerificationRequest RecordBuilder
   */
  public static avro.MdxVerificationRequest.Builder newBuilder() {
    return new avro.MdxVerificationRequest.Builder();
  }

  /**
   * Creates a new MdxVerificationRequest RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MdxVerificationRequest RecordBuilder
   */
  public static avro.MdxVerificationRequest.Builder newBuilder(avro.MdxVerificationRequest.Builder other) {
    return new avro.MdxVerificationRequest.Builder(other);
  }

  /**
   * Creates a new MdxVerificationRequest RecordBuilder by copying an existing MdxVerificationRequest instance.
   * @param other The existing instance to copy.
   * @return A new MdxVerificationRequest RecordBuilder
   */
  public static avro.MdxVerificationRequest.Builder newBuilder(avro.MdxVerificationRequest other) {
    return new avro.MdxVerificationRequest.Builder(other);
  }

  /**
   * RecordBuilder for MdxVerificationRequest instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MdxVerificationRequest>
    implements org.apache.avro.data.RecordBuilder<MdxVerificationRequest> {

    private java.lang.CharSequence fullname;
    private java.lang.CharSequence policyId;
    private java.lang.CharSequence MdxGroupMethod;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(avro.MdxVerificationRequest.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.fullname)) {
        this.fullname = data().deepCopy(fields()[0].schema(), other.fullname);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.policyId)) {
        this.policyId = data().deepCopy(fields()[1].schema(), other.policyId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.MdxGroupMethod)) {
        this.MdxGroupMethod = data().deepCopy(fields()[2].schema(), other.MdxGroupMethod);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing MdxVerificationRequest instance
     * @param other The existing instance to copy.
     */
    private Builder(avro.MdxVerificationRequest other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.fullname)) {
        this.fullname = data().deepCopy(fields()[0].schema(), other.fullname);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.policyId)) {
        this.policyId = data().deepCopy(fields()[1].schema(), other.policyId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.MdxGroupMethod)) {
        this.MdxGroupMethod = data().deepCopy(fields()[2].schema(), other.MdxGroupMethod);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'fullname' field.
      * @return The value.
      */
    public java.lang.CharSequence getFullname() {
      return fullname;
    }

    /**
      * Sets the value of the 'fullname' field.
      * @param value The value of 'fullname'.
      * @return This builder.
      */
    public avro.MdxVerificationRequest.Builder setFullname(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.fullname = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'fullname' field has been set.
      * @return True if the 'fullname' field has been set, false otherwise.
      */
    public boolean hasFullname() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'fullname' field.
      * @return This builder.
      */
    public avro.MdxVerificationRequest.Builder clearFullname() {
      fullname = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'policyId' field.
      * @return The value.
      */
    public java.lang.CharSequence getPolicyId() {
      return policyId;
    }

    /**
      * Sets the value of the 'policyId' field.
      * @param value The value of 'policyId'.
      * @return This builder.
      */
    public avro.MdxVerificationRequest.Builder setPolicyId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.policyId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'policyId' field has been set.
      * @return True if the 'policyId' field has been set, false otherwise.
      */
    public boolean hasPolicyId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'policyId' field.
      * @return This builder.
      */
    public avro.MdxVerificationRequest.Builder clearPolicyId() {
      policyId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'MdxGroupMethod' field.
      * @return The value.
      */
    public java.lang.CharSequence getMdxGroupMethod() {
      return MdxGroupMethod;
    }

    /**
      * Sets the value of the 'MdxGroupMethod' field.
      * @param value The value of 'MdxGroupMethod'.
      * @return This builder.
      */
    public avro.MdxVerificationRequest.Builder setMdxGroupMethod(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.MdxGroupMethod = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'MdxGroupMethod' field has been set.
      * @return True if the 'MdxGroupMethod' field has been set, false otherwise.
      */
    public boolean hasMdxGroupMethod() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'MdxGroupMethod' field.
      * @return This builder.
      */
    public avro.MdxVerificationRequest.Builder clearMdxGroupMethod() {
      MdxGroupMethod = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public MdxVerificationRequest build() {
      try {
        MdxVerificationRequest record = new MdxVerificationRequest();
        record.fullname = fieldSetFlags()[0] ? this.fullname : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.policyId = fieldSetFlags()[1] ? this.policyId : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.MdxGroupMethod = fieldSetFlags()[2] ? this.MdxGroupMethod : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
